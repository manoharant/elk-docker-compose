input {
  beats {
    port => 5044
  }
  
}
filter {
      
      ruby {
        code => "event.set('ingestionTimestamp', Time.now());"
      }
      # Booking Engine App Logs
      grok {
        # We exit on first match, so we go from more specific to more lenient.
        # While this is not the most efficient solution performance wise, it
        # allows us to extract as much data as possible.
        # Try grok expressions here: https://grokconstructor.appspot.com/do/match
        break_on_match => true
        match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp}\s*\[\s*%{LOGLEVEL:log.level}\s*\]\s*\[%{IDENTIFIER:userreference}?\]\s*\[%{IDENTIFIER:sessionid}?\]\s*\[%{IDENTIFIER:conversationid}?\]\s*\[%{IDENTIFIER:correlationid}?\]\s*\[%{IDENTIFIER:trace.id}?\]\s*\[%{IDENTIFIER:span.id}?\]\s*\[%{METHOD:operation}?\]\s*\[%{EXT_SPRING_CLASS}?\]\s*\[%{EXT_JAVA_METHOD}?\](\s*\[%{BUSINESS_KEYS}?\])?(\s*\[%{NOTBRACKET:status}\])?\s*\:\s*%{CUSTOM_GREEDY:message}([\r\n]*%{GREEDYMULTILINE:payload})?" }
        match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp}\s*\[\s*%{LOGLEVEL:log.level}\s*\]\s*\[%{IDENTIFIER:userreference}?\]\s*\[%{IDENTIFIER:conversationid}?\]\s*\[%{IDENTIFIER:trace.id}?\]\s*\[%{IDENTIFIER:span.id}?\]\s*\[%{METHOD:operation}?\]\s*\[%{EXT_SPRING_CLASS}?\]\s*\[%{EXT_JAVA_METHOD}?\](\s*\[%{BUSINESS_KEYS}?\])?(\s*\[%{NOTBRACKET:status}\])?\s*\:\s*%{CUSTOM_GREEDY:message}([\r\n]*%{GREEDYMULTILINE:payload})?" }
        match => { "message" => "^%{TIMESTAMP_ISO8601:timestamp}\s*\[%{THREAD:thread}\]\s*%{LOGLEVEL:log.level}\s*%{EXT_SPRING_CLASS}\s*\-\s*%{CUSTOM_GREEDY:message}([\r\n]*%{GREEDYMULTILINE:payload})?" }
        # Patterns used in our matches.
        patterns_dir => ["/usr/share/logstash/pipeline/patterns"]
        overwrite => [ "message" ]
      }

      grok {
          match => { "[log][file][path]" => "/(?<service_name>[^/]+)$" }
      }
      
      mutate {
        gsub => ["service_name", "\.[^.]+$", ""]
      }

      date {
        match => [ "timestamp", "ISO8601", "yyyy/MM/dd HH:mm:ss"]
      }
      mutate {
        add_field => { "[log][type]" => "%{[@metadata][type]}" }
        remove_field => ["timestamp", "log", "agent", "jcontents", "[event][original]", "[kubernetes][pod][uid]", "[kubernetes][replicaset][name]", "ecs", "[input][type]", "stream", "container", "[kubernetes][namespace_labels]", "[kubernetes][node][labels]"]
      }
}
output {
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY}"
  }
}